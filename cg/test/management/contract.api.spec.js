jest.mock('../../src/utils/blockchain/web3-provider-factory');

const { initResources, fetch, closeResources, serverHost } = require('../utils');
const ws = require('ws');
const { managementJWT } = require('../../src/utils/jwt');
const { db } = require('../../src/db');
const { Unauthorized, BadRequest } = require('../../src/utils/errors');
const { CONTRACT_CONFIG_KEY, recordConsentGivenTo, sha3 } = require('../../src/utils/blockchain');

beforeAll(initResources);

afterAll(closeResources);

const abiJson = JSON.stringify(require('../../src/utils/blockchain/contract-abi.json'));

describe('Deploying contract', () => {
  it('should not allow the management user to deploy contract without a token', async () => {
    const res = await fetch('/api/management/contract/deploy', {
      method: 'POST'
    });

    expect(res.ok).toBeFalsy();
    expect(res.status).toBe(Unauthorized.StatusCode);
  });

  it('should reject missing contract data', async () => {
    const token = await managementJWT.sign({ id: 1 });

    const contract = {};

    const res = await fetch('/api/management/contract/deploy', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`
      },
      body: contract
    });

    expect(res.ok).toBeFalsy();
    expect(res.status).toBe(BadRequest.StatusCode);
    expect(await res.json()).toMatchSnapshot();
  });

  it('should reject wrong JSON', async () => {
    const token = await managementJWT.sign({ id: 1 });

    const contract = {
      abiJson: 'bla bla bla'
    };

    const res = await fetch('/api/management/contract/deploy', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`
      },
      body: contract
    });

    expect(res.ok).toBeFalsy();
    expect(res.status).toBe(BadRequest.StatusCode);
  });

  it('should store contract details on the DB', async () => {
    const token = await managementJWT.sign({ id: 1 });

    let compiledData =
      '0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111fa8061005e6000396000f3006060604052600436106100c4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062091988146100c95780630c1e947f1461011a5780634c3e99721461018457806352843d51146102035780636017cf4c1461026b57806362b8b300146102c9578063785779d01461033b57806391bd72231461037a578063a3514e4a146103eb578063ae0ef4b41461045d578063bd92ccee146104cf578063c24b846f1461050e578063f77c47911461058a575b600080fd5b34156100d457600080fd5b610100600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105df565b604051808215151515815260200191505060405180910390f35b341561012557600080fd5b61016a60048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff16906020019091905050610683565b604051808215151515815260200191505060405180910390f35b341561018f57600080fd5b6101e96004808035600019169060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061070c565b604051808215151515815260200191505060405180910390f35b341561020e57600080fd5b61024760048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a0d565b6040518082600281111561025757fe5b60ff16815260200191505060405180910390f35b341561027657600080fd5b6102af60048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a80565b604051808215151515815260200191505060405180910390f35b34156102d457600080fd5b610321600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610b13565b604051808215151515815260200191505060405180910390f35b341561034657600080fd5b610360600480803560001916906020019091905050610c05565b604051808215151515815260200191505060405180910390f35b341561038557600080fd5b61038d610d21565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156103d65780820151818401526020810190506103bb565b50505050905001935050505060405180910390f35b34156103f657600080fd5b610443600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610dc2565b604051808215151515815260200191505060405180910390f35b341561046857600080fd5b6104b5600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610e1a565b604051808215151515815260200191505060405180910390f35b34156104da57600080fd5b6104f4600480803560001916906020019091905050610e6d565b604051808215151515815260200191505060405180910390f35b341561051957600080fd5b610533600480803560001916906020019091905050610ea2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561057657808201518184015260208101905061055b565b505050509050019250505060405180910390f35b341561059557600080fd5b61059d6110b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600090505b600180549050811015610678578273ffffffffffffffffffffffffffffffffffffffff1660018281548110151561061a57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561066b576001915061067d565b80806001019150506105e7565b600091505b50919050565b60008160026000866000191660001916815260200190815260200160002060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156106fc57fe5b0217905550600190509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076a57600080fd5b836000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1615151415156107a957600080fd5b6107b284610e1a565b15156107bd57600080fd5b600091505b600180549050821015610893576000600260008760001916600019168152602001908152602001600020600101600060018581548110151561080057fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561088157fe5b021790555081806001019250506107c2565b600091505b8351821015610942576001600260008760001916600019168152602001908152602001600020600101600086858151811015156108d157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561093057fe5b02179055508180600101925050610898565b600060026000876000191660001916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f17b46fe72172b70500853bedb3b5ba16a452a4734c92f74d2aed8a260c8e5392858560405180836000191660001916815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109ed5780820151818401526020810190506109d2565b50505050905001935050505060405180910390a160019250505092915050565b600060026000846000191660001916815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610a8b336105df565b1515610a9657600080fd5b7f7adbefd4047a6b3fc04baed7453752b4eceb772d9036d0006014fc9cfa9af75683836040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7057600080fd5b610b7982610dc2565b1515610b8457600080fd5b7fa5ce10be54b4ef0d5b03c912f8855709209175079c70907491e4ab39606cc7b6826040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610be9578082015181840152602081019050610bce565b505050509050019250505060405180910390a160019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6257600080fd5b816000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff161515141515610ca157600080fd5b600160026000856000191660001916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f6035499ce5e80742180c62be06aea6c0cce9f0df624f498b9709a79adc8fb9968360405180826000191660001916815260200191505060405180910390a16001915050919050565b610d296110d9565b60006001808054905081805480602002602001604051908101604052809291908181526020018280548015610db357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d69575b50505050509150915091509091565b60008151604051805910610dd35750595b908082528060200260200182016040525060019080519060200190610df99291906110ed565b508160019080519060200190610e109291906110ed565b5060019050919050565b600080600090505b8251811015610e6357610e4b8382815181101515610e3c57fe5b906020019060200201516105df565b1515610e5657600080fd5b8080600101915050610e22565b6001915050919050565b600060026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff169050919050565b610eaa611177565b610eb2611177565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0f57600080fd5b836000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff161515141515610f4e57600080fd5b600180549050604051805910610f615750595b90808252806020026020018201604052509250600091505b60018054905082101561106a576002600086600019166000191681526020019081526020016000206001016000600184815481101515610fb557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16838381518110151561103757fe5b90602001906020020190600281111561104c57fe5b9081600281111561105957fe5b815250508180600101925050610f79565b7f5cee2268933cd873c783419e5be7668e121517767fe669a5a703b09426b138158560405180826000191660001916815260200191505060405180910390a1829350505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602060405190810160405280600081525090565b828054828255906000526020600020908101928215611166579160200282015b828111156111655782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061110d565b5b509050611173919061118b565b5090565b602060405190810160405280600081525090565b6111cb91905b808211156111c757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611191565b5090565b905600a165627a7a72305820d6b89a0fa0e422a07ff6c1b1dea2a6d418303a07dcafd0028421aa3832c2c7110029';
    const contract = {
      abiJson,
      compiledData
    };

    const res = await fetch('/api/management/contract/deploy', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`
      },
      body: contract
    });

    let result = await res.json();
    expect(result).toEqual(
      expect.objectContaining({
        address: expect.anything()
      })
    );

    const [config] = await db('config').where({ key: CONTRACT_CONFIG_KEY });
    expect(config.value).toEqual(
      expect.objectContaining({
        abiJson: expect.anything(),
        compiledData: compiledData,
        address: expect.anything()
      })
    );
  });
});

describe('Getting contract details', () => {
  it('should not allow the management user to get contract details without a token', async () => {
    const res = await fetch('/api/management/contract/details', {
      method: 'GET'
    });

    expect(res.ok).toBeFalsy();
    expect(res.status).toBe(Unauthorized.StatusCode);
  });

  it('should return contract details from the DB', async () => {
    const token = await managementJWT.sign({ id: 1 });

    let compiledData =
      '0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111fa8061005e6000396000f3006060604052600436106100c4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062091988146100c95780630c1e947f1461011a5780634c3e99721461018457806352843d51146102035780636017cf4c1461026b57806362b8b300146102c9578063785779d01461033b57806391bd72231461037a578063a3514e4a146103eb578063ae0ef4b41461045d578063bd92ccee146104cf578063c24b846f1461050e578063f77c47911461058a575b600080fd5b34156100d457600080fd5b610100600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105df565b604051808215151515815260200191505060405180910390f35b341561012557600080fd5b61016a60048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560ff16906020019091905050610683565b604051808215151515815260200191505060405180910390f35b341561018f57600080fd5b6101e96004808035600019169060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061070c565b604051808215151515815260200191505060405180910390f35b341561020e57600080fd5b61024760048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a0d565b6040518082600281111561025757fe5b60ff16815260200191505060405180910390f35b341561027657600080fd5b6102af60048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a80565b604051808215151515815260200191505060405180910390f35b34156102d457600080fd5b610321600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610b13565b604051808215151515815260200191505060405180910390f35b341561034657600080fd5b610360600480803560001916906020019091905050610c05565b604051808215151515815260200191505060405180910390f35b341561038557600080fd5b61038d610d21565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156103d65780820151818401526020810190506103bb565b50505050905001935050505060405180910390f35b34156103f657600080fd5b610443600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610dc2565b604051808215151515815260200191505060405180910390f35b341561046857600080fd5b6104b5600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610e1a565b604051808215151515815260200191505060405180910390f35b34156104da57600080fd5b6104f4600480803560001916906020019091905050610e6d565b604051808215151515815260200191505060405180910390f35b341561051957600080fd5b610533600480803560001916906020019091905050610ea2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561057657808201518184015260208101905061055b565b505050509050019250505060405180910390f35b341561059557600080fd5b61059d6110b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600090505b600180549050811015610678578273ffffffffffffffffffffffffffffffffffffffff1660018281548110151561061a57fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561066b576001915061067d565b80806001019150506105e7565b600091505b50919050565b60008160026000866000191660001916815260200190815260200160002060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156106fc57fe5b0217905550600190509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076a57600080fd5b836000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1615151415156107a957600080fd5b6107b284610e1a565b15156107bd57600080fd5b600091505b600180549050821015610893576000600260008760001916600019168152602001908152602001600020600101600060018581548110151561080057fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561088157fe5b021790555081806001019250506107c2565b600091505b8351821015610942576001600260008760001916600019168152602001908152602001600020600101600086858151811015156108d157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561093057fe5b02179055508180600101925050610898565b600060026000876000191660001916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f17b46fe72172b70500853bedb3b5ba16a452a4734c92f74d2aed8a260c8e5392858560405180836000191660001916815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156109ed5780820151818401526020810190506109d2565b50505050905001935050505060405180910390a160019250505092915050565b600060026000846000191660001916815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610a8b336105df565b1515610a9657600080fd5b7f7adbefd4047a6b3fc04baed7453752b4eceb772d9036d0006014fc9cfa9af75683836040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7057600080fd5b610b7982610dc2565b1515610b8457600080fd5b7fa5ce10be54b4ef0d5b03c912f8855709209175079c70907491e4ab39606cc7b6826040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610be9578082015181840152602081019050610bce565b505050509050019250505060405180910390a160019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6257600080fd5b816000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff161515141515610ca157600080fd5b600160026000856000191660001916815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507f6035499ce5e80742180c62be06aea6c0cce9f0df624f498b9709a79adc8fb9968360405180826000191660001916815260200191505060405180910390a16001915050919050565b610d296110d9565b60006001808054905081805480602002602001604051908101604052809291908181526020018280548015610db357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d69575b50505050509150915091509091565b60008151604051805910610dd35750595b908082528060200260200182016040525060019080519060200190610df99291906110ed565b508160019080519060200190610e109291906110ed565b5060019050919050565b600080600090505b8251811015610e6357610e4b8382815181101515610e3c57fe5b906020019060200201516105df565b1515610e5657600080fd5b8080600101915050610e22565b6001915050919050565b600060026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff169050919050565b610eaa611177565b610eb2611177565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f0f57600080fd5b836000151560026000836000191660001916815260200190815260200160002060000160009054906101000a900460ff161515141515610f4e57600080fd5b600180549050604051805910610f615750595b90808252806020026020018201604052509250600091505b60018054905082101561106a576002600086600019166000191681526020019081526020016000206001016000600184815481101515610fb557fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16838381518110151561103757fe5b90602001906020020190600281111561104c57fe5b9081600281111561105957fe5b815250508180600101925050610f79565b7f5cee2268933cd873c783419e5be7668e121517767fe669a5a703b09426b138158560405180826000191660001916815260200191505060405180910390a1829350505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602060405190810160405280600081525090565b828054828255906000526020600020908101928215611166579160200282015b828111156111655782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061110d565b5b509050611173919061118b565b5090565b602060405190810160405280600081525090565b6111cb91905b808211156111c757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611191565b5090565b905600a165627a7a72305820d6b89a0fa0e422a07ff6c1b1dea2a6d418303a07dcafd0028421aa3832c2c7110029';
    let address = '0x41412B44EC2Be0Dd147046320Dc2b0Bd09E83CB8';

    let contract = {
      abiJson,
      compiledData,
      address: address
    };

    await db.transaction(async trx => {
      const [config] = await db('config')
        .transacting(trx)
        .where({ key: CONTRACT_CONFIG_KEY });

      // handle situation when there already is a config created by other tests running in parallel
      if (!config) {
        await db('config')
          .transacting(trx)
          .insert({
            key: CONTRACT_CONFIG_KEY,
            value: JSON.stringify(contract)
          });
      } else {
        contract.abiJson = config.value.abiJson;
        contract.compiledData = config.value.compiledData;
        contract.address = config.value.address;
      }

      const res = await fetch('/api/management/contract/details', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      return expect(await res.json()).toEqual(expect.objectContaining(contract));
    });
  });
});

describe('Event feed websocket', () => {
  let socketSubscription;
  beforeAll(() => {
    socketSubscription = new ws(`ws://${serverHost()}/api/management/events/feed`);
    socketSubscription.on('error', err => {
      console.error(err);
    });
  });

  it('should emit events that occur on the blockchain in nicer format', async done => {
    expect.assertions(5);
    socketSubscription.on('message', event => {
      const data = JSON.parse(event);
      expect(data.eventName).toEqual('Controller_ConsentGivenTo');
      expect(data.params.subjectIdHash).toEqual(sha3('websocket-test'));
      expect(data.params.newProcessorsWhiteListed).toHaveLength(1);
      expect(data.params.newProcessorsWhiteListed[0].toLowerCase()).toEqual(
        process.env.CONTRACT_OWNER_ADDRESS.toLowerCase()
      );
      expect(data.fromName).toEqual('Master Controller Node');
      done();
    });
    await recordConsentGivenTo(sha3('websocket-test'), []);
  });

  afterAll(() => {
    socketSubscription.close();
  });
});
